"""
NxN 크기의 마을(도로는 0, 도로가 아닌 곳 1)
메두사 집 (S_r, S_c)
공원 (E_r, E_c)

집에서 공원까지 산책
오직 도로만을 따라 최단 경로로 공원까지 이동
- 메두사의 집과 공원은 항상 도로 위에 있음
- 집과 공원의 좌표는 항상 다름

M명의 전사들이 메두사를 잡기 위해 마을에 도착
전사 초기 위치(r_i, c_i)
메두사를 향해 최단 경로로 이동
- 도로와 비도로를 구분하지 않고 어느 칸이든 이동 가능
- 메두사의 집과 전사의 초기 위치가 같은 경우 없음

[1] 메두사의 이동
- 도로(0)를 따라 한 칸 이동, 공원까지 최단 경로 따르기
- 메두사가 이동한 칸에 전사가 있는 경우 전사 사라짐
- 집으로부터 공원까지 최단경로가 여러개라면 "상 -> 하 -> 좌 -> 우"의 우선순위
- 메두사의 집에서 공원까지 도달하는 경로가 없을 수 있음

[2] 메두사의 시선
- 상, 하, 좌, 우 하나의 방향을 선택해 바라봄
- 바라보는 방향으로 90도 시야각(범위 내 전사들 바라볼 수 있음)
- 다른 전사에 가려진 경우 메두사에게 보이지 않음
    ex. 상하좌우 대각선 8방향 나눴을 때 메두사로부터 8방향 중 한 방향에 전사가 위치한 경우,
        그 전사가 메두사와 동일한 방향으로 바라본 범위에 포함된 모든 칸은 보이지 않음
- 메두사가 본 전사들은 모두 돌로 변해 움직일 수 없음
- 해당 턴에서 움직이지 못하고 다음 턴에 돌에서 풀려남
- 상, 하, 좌, 우 중 가장 전사를 많이 볼 수 있는 방향을 바라봄
- 같은 수의 전사를 바라볼 수 있는 방향이 여러개인 경우 상->하->좌->우의 우선순위로 방향 결정

[3] 전사들의 이동
- 돌로 변하지 않은 경우 최대 두 칸 이동
- 전사들끼리 같은 칸에 있을 수 있음
- 격자 바깥으로 못 감
- 메두사 시야에 있는 곳으로 못감
1. 메두사와의 거리를 줄일 수 있는 방향(우선순위 상하좌우)
2. 메두사와 거리를 줄일 수 있는 방향으로 한칸 더(우선순위 좌우상하)

[4] 전사의 공격
- 메두사와 같은 칸에 도달한 전사는 사라짐
- 최단경로 게산할 때 맨해튼 거리

입력 :
마을의 크기 N, 전사의 수 M
메두사의 집의 위치 정보 s_r, s_c와 공원의 위치 정보 e_r, e_c
다음 줄에 M명의 전사들의 좌표 a1_r, a1_c, a2_r, a2_c, ... am_r, am_c
N줄에 마을 도로 정보

출력 :
4단계 반복하며 메두사가 공원에 도달할 때까지 매 턴마다,
1. 해당 턴에서 모든 전사가 이동한 거리의 합
2. 메두사로 인해 돌이 된 전사의 수
3. 메두사를 공격한 전사의 수
공백 두고 차례대로 출력
메두사가 공원에 도착하는 턴에는 0 출력
메두사의 집으로부터 공원까지 이어지는 도로가 존재하지 않는 경우 -1 출력

아이디어 :
최단 경로 -> dfs
"""

n, m = map(int, input().split())
home_r, home_c, park_r, park_c = map(int, input().split())

town = [list(map(int, input().split())) for _ in range(n)]

